<% layout("layout") %>

<h2 class="dashboard-title">Emergency Issues Dashboard</h2>

<!-- Map Container to Show All Emergency Locations -->
<div class="map-container">
    <div id="emergencyMap" style="height: 400px; border-radius: 10px;"></div>
</div>

<!-- Display Emergency Issues (Severity: Critical) -->
<% if (emergencyIssues.length > 0) { %>
    <div class="card-container">
        <% emergencyIssues.forEach(issue => { %>
            <% if (issue.severity === 'Critical') { %> <!-- Check if the issue is critical --> 
                <div class="card emergency-card" id="card-<%= issue._id %>" data-location="<%= issue.location %>" data-type="<%= issue.type %>">
                    <div class="card-content">
                        <div class="emergency-badge">EMERGENCY</div>
                        <h2 class="card-title"><%= issue.type %></h2>
                        <p class="card-details"><%= issue.details %></p>
                        <p><strong>Severity:</strong> <span class="severity-critical"><%= issue.severity %></span></p>
                        <p><strong>Location:</strong> <%= issue.location %></p>
                        
                        <div class="status-container">
                            <span class="status-label <%= issue.status.replace(/\s+/g, '-').toLowerCase() %>">
                                <%= issue.status %>
                            </span>
                        </div>
                        
                        <!-- Update status form -->
                        <form action="/authority/status/<%= issue._id %>" method="POST" class="status-form">
                            <label for="status-<%= issue._id %>">Update Status:</label>
                            <select name="status" id="status-<%= issue._id %>" required>
                                <option value="Complaint Received" <% if (issue.status === 'Complaint Received') { %> selected <% } %>>Complaint Received</option>
                                <option value="Responded by Authority" <% if (issue.status === 'Responded by Authority') { %> selected <% } %>>Responded by Authority</option>
                                <option value="Work Under Progress" <% if (issue.status === 'Work Under Progress') { %> selected <% } %>>Work Under Progress</option>
                                <option value="Work Done" <% if (issue.status === 'Work Done') { %> selected <% } %>>Work Done</option>
                            </select>
                            <button type="submit" class="update-status-btn">Update Status</button>
                        </form>

                        <div class="comments-section">
                        <h3>Comments:</h3>
                        <ul class="comment-list">
                                <% if (issue.comments && issue.comments.length > 0) { %>
                            <% issue.comments.forEach(comment => { %>
                                        <li class="comment-item">
                                            <div class="comment-text"><%= comment.text %></div>
                                            <div class="comment-date"><%= new Date(comment.date).toLocaleString() %></div>
                                        </li>
                            <% }) %>
                                <% } else { %>
                                    <li class="comment-item no-comments">No comments yet</li>
                                <% } %>
                        </ul>
                        </div>

                        <!-- Add a comment form -->
                        <form action="/authority/comment/<%= issue._id %>" method="POST" class="comment-form">
                            <textarea name="comment" placeholder="Add a comment" required class="comment-input"></textarea>
                            <button type="submit" class="submit-button">Submit Comment</button>
                        </form>

                        <!-- Delete complaint form -->
                        <form action="/authority/emergency/delete/<%= issue._id %>" method="POST" class="delete-form">
                            <button type="submit" class="delete-button">Delete Report</button>
                        </form>
                    </div>
                </div>
            <% } %> <!-- End of critical issue check -->
        <% }) %>
    </div>
<% } else { %>
    <div class="no-issues">
    <p>No emergency issues reported.</p>
    </div>
<% } %>

<!-- OpenStreetMap and Leaflet -->
<link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css" integrity="sha256-p4NxAoJBhIIN+hmNHrzRCf9tD/miZyoHS5obTRR9BMY=" crossorigin="" />
<script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js" integrity="sha256-20nQCchB9co0qIjJZRGuk2/Z9VM+kNiyxNV1lvTlZBo=" crossorigin=""></script>
<!-- Leaflet Geocoder for location search -->
<script src="https://unpkg.com/leaflet-control-geocoder/dist/Control.Geocoder.js"></script>
<link rel="stylesheet" href="https://unpkg.com/leaflet-control-geocoder/dist/Control.Geocoder.css" />
<!-- Font Awesome for icons -->
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.3/css/all.min.css">

<script>
    // Initialize map
    function initMap() {
        console.log("Initializing emergency dashboard map");
        
        // Default center (India)
        const defaultCenter = [20.5937, 78.9629];
        
        // Create a map
        const map = L.map('emergencyMap').setView(defaultCenter, 5);
        
        // Add OpenStreetMap tile layer
        L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
            attribution: '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'
        }).addTo(map);
        
        // Add search control
        const searchControl = L.Control.geocoder({
            defaultMarkGeocode: false,
            placeholder: "Search for location...",
            errorMessage: "Location not found"
        }).addTo(map);
        
        // Add a default marker to show the map is working
        const defaultMarker = L.marker(defaultCenter).addTo(map);
        defaultMarker.bindPopup("Default location (India)");
        
        // Get all emergency cards
        const emergencyCards = document.querySelectorAll('.emergency-card');
        console.log(`Found ${emergencyCards.length} emergency cards on the page`);
        
        // Check if HTML has elements with the class 'emergency-card'
        const allDivs = document.querySelectorAll('div');
        console.log(`Total divs on page: ${allDivs.length}`);
        console.log(`Emergency card divs found: ${emergencyCards.length}`);
        
        // If no emergency issues, return but keep map visible
        if (emergencyCards.length === 0) {
            console.log("No emergency issues found to plot on map");
            // Add a message to the map
            const noIssuesMarker = L.marker(defaultCenter).addTo(map);
            noIssuesMarker.bindPopup("No emergency issues reported").openPopup();
            return;
        }
        
        console.log(`Processing ${emergencyCards.length} emergency issues to plot on map`);
        
        // Create bounds object to fit all markers
        const bounds = L.latLngBounds();
        let markersCount = 0;
        
        // Add markers for each emergency location
        emergencyCards.forEach(card => {
            const location = card.dataset.location;
            const type = card.dataset.type;
            const cardId = card.id;
            
            console.log(`Card data:`, {
                id: cardId,
                location: location,
                type: type,
                allAttributes: Object.keys(card.dataset)
            });
            
            if (location) {
                console.log(`Processing emergency location: ${location} for type: ${type}`);
                
                // Use direct Nominatim API for more reliable geocoding
                fetch(`https://nominatim.openstreetmap.org/search?format=json&q=${encodeURIComponent(location)}&limit=1`)
                    .then(response => response.json())
                    .then(data => {
                        console.log(`Geocoding results for ${location}:`, data);
                        
                        if (data && data.length > 0) {
                            const result = data[0];
                            const latlng = L.latLng(parseFloat(result.lat), parseFloat(result.lon));
                            
                            console.log(`Found coordinates for emergency at ${location}: [${latlng.lat}, ${latlng.lng}]`);
                            
                            // Create emergency icon
                            const emergencyIcon = L.icon({
                                iconUrl: 'https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-2x-red.png',
                                shadowUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/0.7.7/images/marker-shadow.png',
                                iconSize: [25, 41],
                                iconAnchor: [12, 41],
                                popupAnchor: [1, -34],
                                shadowSize: [41, 41]
                            });
                            
                            // Create marker
                            const marker = L.marker(latlng, {
                                icon: emergencyIcon
                            }).addTo(map);
                            
                            // Create popup
                            marker.bindPopup(`
                                <strong style="color: #d9534f;">EMERGENCY: ${type}</strong><br>
                                ${location}<br>
                                <small>Click to view details</small>
                            `);
                            
                            // Add click listener
                            marker.on('click', function() {
                                document.getElementById(cardId).scrollIntoView({ 
                                    behavior: 'smooth',
                                    block: 'center'
                                });
                                
                                document.getElementById(cardId).classList.add('highlight');
                                setTimeout(() => {
                                    document.getElementById(cardId).classList.remove('highlight');
                                }, 2000);
                            });
                            
                            // Extend bounds to include this marker
                            bounds.extend(latlng);
                            markersCount++;
                            
                            // Fit the map to the bounds if we have markers
                            if (markersCount > 0 && bounds.isValid()) {
                                map.fitBounds(bounds, {padding: [30, 30]});
                            }
                        } else {
                            console.warn(`Could not geocode emergency location: ${location}`);
                        }
                    })
                    .catch(error => {
                        console.error(`Error geocoding emergency location ${location}:`, error);
                    });
            } else {
                console.warn(`Card ${cardId} has no location data`);
            }
        });
    }
    
    // Initialize the map when the page loads
    document.addEventListener('DOMContentLoaded', initMap);
</script>

<style>
    .dashboard-title { 
        text-align: center; 
        font-size: 2.2em; 
        color: #d9534f; 
        margin: 20px 0;
        font-weight: bold;
    }
    
    .map-container {
        width: 95%;
        margin: 20px auto;
        box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);
        border-radius: 10px;
        overflow: hidden;
        z-index: 1;
    }
    
    #emergencyMap {
        width: 100%;
        height: 400px;
        border-radius: 10px;
    }
    
    .card-container { 
        display: grid; 
        grid-template-columns: repeat(auto-fill, minmax(350px, 1fr)); 
        gap: 20px; 
        padding: 20px; 
    }
    
    .emergency-card {
        background-color: white;
        border-radius: 10px;
        box-shadow: 0 4px 15px rgba(0, 0, 0, 0.15);
        position: relative;
        border-top: 4px solid #d9534f;
        transition: transform 0.3s ease, box-shadow 0.3s ease;
    }
    
    .emergency-card:hover {
        transform: translateY(-5px);
        box-shadow: 0 8px 25px rgba(0, 0, 0, 0.2);
    }
    
    .emergency-card.highlight {
        animation: highlight 2s ease;
    }
    
    @keyframes highlight {
        0% { transform: scale(1); }
        50% { transform: scale(1.05); box-shadow: 0 0 20px rgba(217, 83, 79, 0.7); }
        100% { transform: scale(1); }
    }
    
    .emergency-badge {
        position: absolute;
        top: 10px;
        right: 10px;
        background-color: #d9534f;
        color: white;
        padding: 5px 10px;
        border-radius: 20px;
        font-size: 0.8em;
        font-weight: bold;
    }
    
    .card-content { 
        padding: 25px 20px;
    }
    
    .card-title { 
        font-size: 1.8em; 
        margin-bottom: 15px; 
        color: #2a3d66;
    }
    
    .card-details { 
        font-size: 1.1em; 
        color: #555; 
        margin-bottom: 20px;
        line-height: 1.5;
    }
    
    .severity-critical {
        color: #d9534f;
        font-weight: bold;
    }
    
    .status-container {
        margin: 15px 0;
    }
    
    .status-label {
        display: inline-block;
        padding: 5px 12px;
        border-radius: 20px;
        font-weight: bold;
        font-size: 0.9em;
    }
    
    .complaint-received {
        background-color: #ffdc82;
        color: #856404;
    }
    
    .responded-by-authority {
        background-color: #90e1ff;
        color: #0c5460;
    }
    
    .work-under-progress {
        background-color: #b3d7ff;
        color: #004085;
    }
    
    .work-done {
        background-color: #c3e6cb;
        color: #155724;
    }
    
    .status-form {
        margin: 15px 0;
        padding: 15px;
        background-color: #f8f9fa;
        border-radius: 8px;
    }
    
    .status-form select {
        width: 100%;
        padding: 10px;
        margin: 10px 0;
        border: 1px solid #ddd;
        border-radius: 5px;
    }
    
    .update-status-btn {
        background-color: #2a3d66;
        color: white;
        padding: 8px 15px;
        border: none;
        border-radius: 5px;
        cursor: pointer;
        width: 100%;
    }
    
    .update-status-btn:hover {
        background-color: #374f84;
    }
    
    .comments-section {
        margin-top: 20px;
        border-top: 1px solid #eee;
        padding-top: 15px;
    }
    
    .comment-list {
        list-style: none;
        padding: 0;
        margin: 0;
    }
    
    .comment-item {
        padding: 10px 0;
        border-bottom: 1px solid #eee;
    }
    
    .comment-text {
        font-size: 1em;
        color: #333;
        margin-bottom: 5px;
    }
    
    .comment-date {
        font-size: 0.8em;
        color: #777;
    }
    
    .no-comments {
        color: #999;
        font-style: italic;
    }
    
    .comment-form {
        margin-top: 20px;
    }
    
    .comment-input {
        width: 100%;
        padding: 10px;
        border: 1px solid #ddd;
        border-radius: 5px;
        margin-bottom: 10px;
        min-height: 80px;
    }
    
    .submit-button {
        background-color: #2a3d66;
        color: white;
        padding: 10px 15px;
        border: none;
        border-radius: 5px;
        cursor: pointer;
        width: 100%;
    }
    
    .submit-button:hover {
        background-color: #374f84;
    }
    
    .delete-form {
        margin-top: 20px;
    }
    
    .delete-button {
        background-color: #dc3545;
        color: white;
        padding: 10px 15px;
        border: none;
        border-radius: 5px;
        cursor: pointer;
        width: 100%;
    }
    
    .delete-button:hover {
        background-color: #c82333;
    }
    
    .no-issues {
        text-align: center;
        padding: 40px;
        background-color: white;
        border-radius: 10px;
        margin: 20px;
        font-size: 1.2em;
        color: #666;
    }
    
    @media (max-width: 768px) {
        .card-container {
            grid-template-columns: 1fr;
        }
    }
</style>
